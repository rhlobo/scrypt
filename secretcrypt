#! /bin/bash


# VARIABLES ###################################################################
_USER=${SUDO_USER}
_HOME=$(eval echo ~${_USER})
_KEYDIR="${_HOME}/.scrypt"

# Set path variables
_CURRDIR="$(pwd)"
_SOURCE="${BASH_SOURCE[0]}"
while [ -h "$_SOURCE" ]; do
  _BASEDIR="$( cd -P "$( dirname "$_SOURCE" )" >/dev/null 2>&1 && pwd )"
  _SOURCE="$(readlink "$_SOURCE")"
  [[ $_SOURCE != /* ]] && _SOURCE="$_BASEDIR/$_SOURCE"
done
_BASEDIR="$( cd -P "$( dirname "$_SOURCE" )" >/dev/null 2>&1 && pwd )"


# FUNCTION DEFINITION #########################################################
# Displays help message
display_help(){
    local MESSAGE=$1
    [ ! -z "${MESSAGE}" ] && echo "${MESSAGE}"
    cat <<EOF

    Usage:  $0 <keyname> COMMAND SECRET_ATTRIBUTE...
            Uses secret-tool to store/retrieve secrets.

            Saving secrets:
            $0 <keyname> save SECRET_ATTRIBUTE
                SECRET_VALUE can either be piped or
                provided manually after the command

            Loading secrets:
            $0 <keyname> load SECRET_ATTRIBUTE

            Clearing secrets:
            $0 <keyname> clear SECRET_ATTRIBUTE
EOF
}

# Displays error message
display_error(){
    cat <<< "ERROR: $@" 1>&2;
}


# PARSE CLI ARGUMENTS #########################################################
_NAME=$1
_COMMAND=${2,,}
_SECRET_ATTRIBUTE="secretscrypt:${3}"

# Name parameter
[ -z "${_NAME}" ] && {
    display_help "Obligatory key 'name' parameter is missing."
    exit 1
}

# Command parameter
case $_COMMAND in
    save|load|clear)
        ;;
    *)
        display_error "Command not recognized."
        exit 1
        ;;
esac

# Attribute parameter
[ -z "${_SECRET_ATTRIBUTE}" ] && {
    display_help "Obligatory 'SECRET_ATTRIBUTE' parameter is missing."
    exit 1
}


# CHECK DEPENDENCIES ##########################################################
# sshcrypt
which sshcrypt &> /dev/null || {
    display_help "sshcrypt not found in PATH."
    exit 1
}

## keyfile
_KEYFILE="${_KEYDIR}/${_NAME}.scryptkey"
test -f "${_KEYFILE}" || {
    display_error "Keyfile not found for '${_NAME}'."
    exit 1
}

# MAIN ########################################################################

[[ "${_COMMAND}" == "save" ]] && {
    cat | "${_BASEDIR}/scrypt" "${_NAME}" encrypt | secret-tool store --label="${_SECRET_ATTRIBUTE}" "${_SECRET_ATTRIBUTE}" "secretcrypt_value" || exit 1
}

[[ "${_COMMAND}" == "load" ]] && {
    secret-tool lookup "${_SECRET_ATTRIBUTE}" "secretcrypt_value" | "${_BASEDIR}/scrypt" "${_NAME}" decrypt 2> /dev/null || {
        display_error "Lookup FAILED... bad lookup params?"
        exit 1
    }
}

[[ "${_COMMAND}" == "clear" ]] && {
    secret-tool clear "${_SECRET_ATTRIBUTE}" "secretcrypt_value" || exit 1
}

exit 0
